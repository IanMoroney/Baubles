buildscript {
	repositories {
		maven { url = "https://files.minecraftforge.net/maven" }
		jcenter()
		mavenCentral()
	}
	// This is only here while FG is under active development
	configurations.classpath {
		resolutionStrategy {
			cacheDynamicVersionsFor 10, "seconds"
			cacheChangingModulesFor 0, "seconds"
		}
	}
	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
	}
}

apply plugin: "net.minecraftforge.gradle"

//adds the build number to the end of the version string if on a build server
String build_number = System.getenv().BUILD_NUMBER
if (build_number == null) {
	build_number = "9999"
}

String semver = "${version_major}.${version_minor}.${version_patch}"
version = "${project.mcversion}-${semver}.${build_number}"

group= "com.azanor.baubles"
archivesBaseName = "Baubles"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
	main
}

dependencies {
	minecraft([
		group  : "${project.forgegroup}",
		name   : "forge",
		version: "${project.mcversion}-${project.forgeversion}"
	])
}

minecraft {
    // version = "${project.mcversion}-${project.forgeversion}"
    // runDir = "run"
    mappings channel: "snapshot", version: project.mcp_mappings
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

// prevent java 8's strict doclint for javadocs from failing builds
if (JavaVersion.current().isJava8Compatible()) {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

processResources
{
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':"${project.version}", 'mcversion':"${project.mcversion}"
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Create API library jar
task apiZip(type: Jar) {
    from(sourceSets.main.java) {
        include "baubles/api/**"
    }
    from(sourceSets.main.output) {
        include "baubles/api/**"
    }

    classifier = 'api'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives apiZip
    archives sourcesJar
}
